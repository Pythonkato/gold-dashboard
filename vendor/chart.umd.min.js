(function(global){
  const PALETTE = ["#fbbf24","#38bdf8","#a78bfa","#f472b6","#34d399","#f97316","#eab308","#22d3ee"];
  function toNumberArray(values){
    if(!Array.isArray(values)) return [];
    const out=[];
    for(let i=0;i<values.length;i++){
      const v=Number(values[i]);
      if(Number.isFinite(v)) out.push(v);
    }
    return out;
  }
  function resolveCanvas(target){
    if(!target) return null;
    if(typeof HTMLCanvasElement!=='undefined' && target instanceof HTMLCanvasElement) return target;
    if(target.canvas && (typeof HTMLCanvasElement==='undefined' || target.canvas instanceof HTMLCanvasElement)) return target.canvas;
    if(target.getContext) return target;
    return null;
  }
  function ownerWindow(canvas){
    const doc=canvas&&canvas.ownerDocument;
    return doc&&doc.defaultView?doc.defaultView:null;
  }
  class LiteChart{
    constructor(ctx,config){
      const canvas=resolveCanvas(ctx);
      if(!canvas) throw new Error('Chart.js-lite requires a canvas element');
      this.canvas=canvas;
      this.ctx=canvas.getContext('2d');
      this.config=config||{};
      this.width=canvas.clientWidth||canvas.width||600;
      this.height=canvas.clientHeight||canvas.height||300;
      const win=ownerWindow(canvas);
      this._win=win;
      this.ratio=win&&win.devicePixelRatio?win.devicePixelRatio:1;
      this._resize=this._resize.bind(this);
      if(this._win) this._win.addEventListener('resize',this._resize);
      this._resize();
    }
    update(config){
      if(config) this.config=config;
      this._draw();
    }
    _resize(){
      const canvas=this.canvas;
      const w=canvas.clientWidth||canvas.width||600;
      const h=canvas.clientHeight||canvas.height||300;
      const ratio=this._win?this._win.devicePixelRatio||1:1;
      this.width=w;
      this.height=h;
      this.ratio=ratio;
      canvas.style.width=w+'px';
      canvas.style.height=h+'px';
      canvas.width=w*ratio;
      canvas.height=h*ratio;
      this._draw();
    }
    _range(series){
      let min=Number.POSITIVE_INFINITY;
      let max=Number.NEGATIVE_INFINITY;
      for(const arr of series){
        for(const v of arr){
          if(v<min) min=v;
          if(v>max) max=v;
        }
      }
      if(min===Number.POSITIVE_INFINITY||max===Number.NEGATIVE_INFINITY){
        min=0;max=1;
      }
      if(min===max){
        const pad=Math.abs(min)||1;
        min-=pad;max+=pad;
      }
      return{min,max};
    }
    _draw(){
      const ctx=this.ctx;
      if(!ctx) return;
      const data=this.config.data||{};
      const labels=Array.isArray(data.labels)?data.labels:[];
      const sets=Array.isArray(data.datasets)?data.datasets:[];
      const numericSets=sets.map(ds=>toNumberArray(ds.data||[])).filter(arr=>arr.length);
      ctx.save();
      ctx.setTransform(this.ratio,0,0,this.ratio,0,0);
      ctx.clearRect(0,0,this.width,this.height);
      if(!numericSets.length){
        ctx.restore();
        return;
      }
      const margin={top:18,right:16,bottom:36,left:60};
      const innerW=Math.max(10,this.width-margin.left-margin.right);
      const innerH=Math.max(10,this.height-margin.top-margin.bottom);
      const {min,max}=this._range(numericSets);
      const span=max-min;
      ctx.translate(0.5,0.5);
      ctx.strokeStyle='rgba(148,163,184,0.4)';
      ctx.lineWidth=1;
      ctx.beginPath();
      ctx.moveTo(margin.left,margin.top+innerH);
      ctx.lineTo(margin.left+innerW,margin.top+innerH);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(margin.left,margin.top);
      ctx.lineTo(margin.left,margin.top+innerH);
      ctx.stroke();
      const ticks=5;
      ctx.fillStyle='rgba(148,163,184,0.85)';
      ctx.textAlign='right';
      ctx.textBaseline='middle';
      ctx.font='12px "Roboto",sans-serif';
      for(let i=0;i<=ticks;i++){
        const y=margin.top+innerH*(1-i/ticks);
        const value=min+span*(i/ticks);
        ctx.fillText(value.toFixed(2),margin.left-8,y);
      }
      const step=labels.length>1?innerW/(labels.length-1):innerW;
      ctx.lineCap='round';
      sets.forEach((dataset,idx)=>{
        const values=toNumberArray(dataset.data||[]);
        if(!values.length) return;
        const color=dataset.borderColor||dataset.color||PALETTE[idx%PALETTE.length];
        const width=parseFloat(dataset.borderWidth||2)||2;
        const fillColor=dataset.backgroundColor||'transparent';
        const radius=parseFloat(dataset.pointRadius||0)||0;
        ctx.strokeStyle=color;
        ctx.lineWidth=width;
        ctx.beginPath();
        values.forEach((value,i)=>{
          const ratio=labels.length>1?i/(labels.length-1):0.5;
          const x=margin.left+ratio*innerW;
          const y=margin.top+innerH*(1-(value-min)/span);
          if(i===0){ctx.moveTo(x,y);}else{ctx.lineTo(x,y);}
        });
        ctx.stroke();
        if(fillColor && fillColor!=='transparent'){
          ctx.lineTo(margin.left+innerW,margin.top+innerH);
          ctx.lineTo(margin.left,margin.top+innerH);
          ctx.closePath();
          ctx.globalAlpha=0.1;
          ctx.fillStyle=fillColor;
          ctx.fill();
          ctx.globalAlpha=1;
        }
        if(radius>0){
          ctx.fillStyle=color;
          values.forEach((value,i)=>{
            const ratio=labels.length>1?i/(labels.length-1):0.5;
            const x=margin.left+ratio*innerW;
            const y=margin.top+innerH*(1-(value-min)/span);
            ctx.beginPath();
            ctx.arc(x,y,radius,0,Math.PI*2);
            ctx.fill();
          });
        }
        const legendX=margin.left+idx*110;
        const legendY=margin.top-14;
        ctx.fillStyle=color;
        ctx.fillRect(legendX,legendY,10,10);
        ctx.fillStyle='rgba(226,232,240,0.95)';
        ctx.textAlign='left';
        ctx.textBaseline='top';
        ctx.fillText(dataset.label||`Series ${idx+1}`,legendX+14,legendY-2);
      });
      ctx.restore();
    }
    destroy(){
      if(this._win) this._win.removeEventListener('resize',this._resize);
    }
  }
  LiteChart.version='4.4.3-local-lite';
  LiteChart.defaults={};
  LiteChart.helpers={};
  global.Chart=LiteChart;
})(typeof window!=='undefined'?window:globalThis);
